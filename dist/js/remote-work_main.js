let subhead=document.getElementsByClassName("chart-subhead"),headline=document.getElementById("chart-head");if(!headline)for(var i=0;i<subhead.length;i++)subhead[i].style.fontWeight="600";Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdRemoteWork=document.getElementById("chart-container-remote-work");function drawHighcharts(){Highcharts.chart(chartIdRemoteWork,{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0},title:{text:null},data:{googleSpreadsheetKey:"1HNmrR402D3mBygSgGLAE1HQZqYEXpkUF0io1C8mtc3I"},plotOptions:{series:{groupPadding:.1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,itemMarginTop:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:9e6,tickAmount:4},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-8,itemMarginTop:0},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdRemoteWork.innerHTML){let t=document.getElementsByClassName("chart-area-remote-work");for(var e=0;e<t.length;e++)t[e].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
